 <div key={index} className="flex gap-3">
                  <div className="flex flex-col items-center">
                    <img
                      src={getAuthorProfile(comment.commentAuthorId)?.photoURL}
                      alt="profile"
                      className="h-10 w-10 block min-h-[40px] object-cover mt1 rounded-full md:h-9 md:w-9"
                    />
                    {/* if index is not last on the list and selectedCommentIndex is not (-1) then show the line */}
                    {/* <p
                      className={` ${
                        index !== comments.length - 1 &&
                        "h-full w-0.5 bg-slate-400"
                      }`}
                    ></p> */}
                  </div>
                  <div className="flex flex-col gap-3 w-full">
                    <div className="w-full flex flex-col gap-1 md:gap-0.5">
                      <div className="flex justify-between">
                        <div className="flex gap-1 items-center">
                          <h2 className="text-black font-semibold text-base md:text-base">
                            {getAuthorProfile(comment.commentAuthorId)?.name}
                          </h2>
                          <p className="text-slate-500 text-center text-sm md:text-xs">
                            ·
                          </p>
                          <p className="text-slate-500 text-sm md:text-xs">
                            {comment.createdAt
                              ? formatTimeAgo(
                                  new Date(comment.createdAt.seconds * 1000)
                                )
                              : "loading"}
                          </p>
                        </div>
                        {/* <button> follow </button> */}
                      </div>
                      <p className="text-[rgb(71,85,105)] text-base">
                        {comment.body}
                      </p>
                    </div>
                    <div className="flex gap-2 items-center">
                      {comment?.likes?.length < 1 ? (
                        <div
                          onClick={() =>
                            handleLikeComment(
                              loggedInUser?.id,
                              post,
                              setPost,
                              comment.commentId,
                              comments,
                              postRef
                            )
                          }
                          className="cursor-pointer focus:scale-120 transition duration-150 ease-in-out"
                        >
                          <img
                            src={notClapImg}
                            alt="clap"
                            className="h-6 w-6"
                          />
                        </div>
                      ) : (
                        <>
                          {comment?.likes?.includes(loggedInUser?.id) ? (
                            <div
                              onClick={() =>
                                handleUnlikeComment(
                                  loggedInUser?.id,
                                  post,
                                  setPost,
                                  comment.commentId,
                                  comments,
                                  postRef
                                )
                              }
                              className="cursor-pointer flex gap-1 items-center"
                            >
                              <div className="cursor-pointer hover:scale50 transition duration-150 ease-in-out">
                                <img
                                  src={clappedImg}
                                  alt="clap"
                                  className="h-6 w-6"
                                />
                              </div>

                              <p className="text-[rgb(71,85,105)] text-sm font-medium">
                                {comment?.likes?.length}
                              </p>
                            </div>
                          ) : (
                            <div
                              onClick={() =>
                                handleLikeComment(
                                  loggedInUser?.id,
                                  post,
                                  setPost,
                                  comment.commentId,
                                  comments,
                                  postRef
                                )
                              }
                              className="cursor-pointer flex gap-1 items-center"
                            >
                              <div className="cursor-pointer hover:scale50 transition duration-150 ease-in-out">
                                <img
                                  src={notClapImg}
                                  alt="clap"
                                  className="h-6 w-6"
                                />
                              </div>
                              <p className="text-[rgb(71,85,105)] text-sm font-medium">
                                {comment?.likes?.length}
                              </p>
                            </div>
                          )}
                        </>
                      )}
                      <p className="text-slate-500 font-semibold text-center text-sm md:text-xs">
                        ·
                      </p>
                      <div
                        onClick={() => setSelectedCommentIndex(index)}
                        className="text-[rgb(71,85,105)] text-sm font-medium cursor-pointer transition duration-150 ease-in-out hover:underline"
                      >
                        Reply
                      </div>
                    </div>
                    {comment.firstTierReplies?.map((reply, index) => (
                      <div key={index} className="flex gap-3">
                        <div className="flex flex-col items-center">
                          <img
                            src={
                              getAuthorProfile(reply.replyAuthorId)?.photoURL
                            }
                            alt="profile"
                            className="h-10 w-10 block min-h-[40px] object-cover mt-1 rounded-full md:h-9 md:w-9"
                          />
                          {/* <p
                            className={` ${
                              index !== comment.firstTierReplies.length - 1 &&
                              "h-full w-0.5 bg-slate-400"
                            }`}
                          ></p> */}
                        </div>
                        <div className="flex flex-col gap-3 w-full">
                          <div className="w-full flex flex-col gap-1 md:gap-0.5">
                            <div className="flex justify-between">
                              <div className="flex gap-1 items-center">
                                <h2 className="text-black font-semibold text-base md:text-base">
                                  {getAuthorProfile(reply.replyAuthorId)?.name}
                                </h2>
                                <p className="text-slate-500 text-center text-sm md:text-xs">
                                  ·
                                </p>
                                <p className="text-gray-500 text-sm md:text-xs">
                                  {reply.createdAt
                                    ? formatTimeAgo(
                                        new Date(reply.createdAt.seconds * 1000)
                                      )
                                    : "loading"}
                                </p>
                              </div>
                              {/* <button> follow </button> */}
                            </div>
                            <p className="text-[rgb(71,85,105)] text-base">
                              {reply.body}
                            </p>
                          </div>

                          <div className="flex gap-2 items-center">
                            {reply?.likes?.length < 1 ? (
                              <div
                                onClick={() =>
                                  handleLikeFirstTierReply(
                                    loggedInUser?.id,
                                    post,
                                    setPost,
                                    comment?.commentId,
                                    reply?.replyId,
                                    comments,
                                    postRef
                                  )
                                }
                                className="cursor-pointer focus:scale-120 transition duration-150 ease-in-out"
                              >
                                <img
                                  src={notClapImg}
                                  alt="clap"
                                  className="h-6 w-6"
                                />
                              </div>
                            ) : (
                              <>
                                {reply?.likes?.includes(loggedInUser?.id) ? (
                                  <div
                                    onClick={() =>
                                      handleUnlikeFirstTierReply(
                                        loggedInUser?.id,
                                        post,
                                        setPost,
                                        comment?.commentId,
                                        reply?.replyId,
                                        comments,
                                        postRef
                                      )
                                    }
                                    className="cursor-pointer flex gap-1 items-center"
                                  >
                                    <div className="cursor-pointer hover:scale50 transition duration-150 ease-in-out">
                                      <img
                                        src={clappedImg}
                                        alt="clap"
                                        className="h-6 w-6"
                                      />
                                    </div>

                                    <p className="text-[rgb(71,85,105)] text-sm font-medium">
                                      {reply?.likes?.length}
                                    </p>
                                  </div>
                                ) : (
                                  <div
                                    onClick={() =>
                                      handleLikeFirstTierReply(
                                        loggedInUser?.id,
                                        post,
                                        setPost,
                                        comment.commentId,
                                        reply?.replyId,
                                        comments,
                                        postRef
                                      )
                                    }
                                    className="cursor-pointer flex gap-1 items-center"
                                  >
                                    <div className="cursor-pointer hover:scale50 transition duration-150 ease-in-out">
                                      <img
                                        src={notClapImg}
                                        alt="clap"
                                        className="h-6 w-6"
                                      />
                                    </div>
                                    <p className="text-[rgb(71,85,105)] text-sm font-medium">
                                      {reply?.likes?.length}
                                    </p>
                                  </div>
                                )}
                              </>
                            )}
                            <p className="text-slate-500 font-semibold text-center text-sm md:text-xs">
                              ·
                            </p>
                            <div
                              onClick={() => setSelectedReplyIndex(index)}
                              className="text-[rgb(71,85,105)] text-sm font-medium cursor-pointer transition duration-150 ease-in-out hover:underline"
                            >
                              Reply
                            </div>
                          </div>
                          {/* put put all */}
                          {reply.secondTierReplies?.map((secondReply, i) => (
                            <div key={i} className="flex gap-3">
                              <div className="flex flex-col items-center">
                                <img
                                  src={
                                    getAuthorProfile(secondReply.replyAuthorId)
                                      ?.photoURL
                                  }
                                  alt="profile"
                                  className="h-10 w-10 block min-h-[40px] object-cover mt-1 rounded-full md:h-9 md:w-9"
                                />
                                {/* <p
                                  className={` ${
                                    i !== comment.firstTierReplies.length - 1 &&
                                    "h-full w-0.5 bg-slate-400"
                                  }`}
                                ></p> */}
                              </div>
                              <div className="flex flex-col gap-3 w-full">
                                <div className="w-full flex flex-col gap-1 md:gap-0.5">
                                  <div className="flex justify-between">
                                    <div className="flex gap-1 items-center">
                                      <h2 className="text-black font-semibold text-base md:text-base">
                                        {
                                          getAuthorProfile(
                                            secondReply.replyAuthorId
                                          )?.name
                                        }
                                      </h2>
                                      <p className="text-slate-500 text-center text-sm md:text-xs">
                                        ·
                                      </p>
                                      <p className="text-gray-500 text-sm md:text-xs">
                                        {secondReply.createdAt
                                          ? formatTimeAgo(
                                              new Date(
                                                secondReply.createdAt.seconds *
                                                  1000
                                              )
                                            )
                                          : "loading"}
                                      </p>
                                    </div>
                                    {/* <button> follow </button> */}
                                  </div>
                                  <p className="text-[rgb(71,85,105)] text-base">
                                    {secondReply.body}
                                  </p>
                                </div>

                                <div className="flex gap-2 items-center">
                                  {secondReply?.likes?.length < 1 ? (
                                    <div
                                      onClick={() =>
                                        handleLikeSecondTierReply(
                                          loggedInUser?.id,
                                          post,
                                          setPost,
                                          comment.commentId,
                                          reply?.replyId,
                                          secondReply?.replyId,
                                          comments,
                                          postRef
                                        )
                                      }
                                      className="cursor-pointer focus:scale-120 transition duration-150 ease-in-out"
                                    >
                                      <img
                                        src={notClapImg}
                                        alt="clap"
                                        className="h-6 w-6"
                                      />
                                    </div>
                                  ) : (
                                    <>
                                      {secondReply?.likes?.includes(
                                        loggedInUser?.id
                                      ) ? (
                                        <div
                                          onClick={() =>
                                            handleUnlikeSecondTierReply(
                                              loggedInUser?.id,
                                              post,
                                              setPost,
                                              comment.commentId,
                                              reply?.replyId,
                                              secondReply?.replyId,
                                              comments,
                                              postRef
                                            )
                                          }
                                          className="cursor-pointer flex gap-1 items-center"
                                        >
                                          <div className="cursor-pointer hover:scale50 transition duration-150 ease-in-out">
                                            <img
                                              src={clappedImg}
                                              alt="clap"
                                              className="h-6 w-6"
                                            />
                                          </div>

                                          <p className="text-[rgb(71,85,105)] text-sm font-medium">
                                            {secondReply?.likes?.length}
                                          </p>
                                        </div>
                                      ) : (
                                        <div
                                          onClick={() =>
                                            handleLikeSecondTierReply(
                                              loggedInUser?.id,
                                              post,
                                              setPost,
                                              comment.commentId,
                                              reply?.replyId,
                                              secondReply?.replyId,
                                              comments,
                                              postRef
                                            )
                                          }
                                          className="cursor-pointer flex gap-1 items-center"
                                        >
                                          <div className="cursor-pointer hover:scale50 transition duration-150 ease-in-out">
                                            <img
                                              src={notClapImg}
                                              alt="clap"
                                              className="h-6 w-6"
                                            />
                                          </div>
                                          <p className="text-[rgb(71,85,105)] text-sm font-medium">
                                            {secondReply?.likes?.length}
                                          </p>
                                        </div>
                                      )}
                                    </>
                                  )}
                                  <p className="text-slate-500 font-semibold text-center text-sm md:text-xs">
                                    ·
                                  </p>
                                  <div
                                    onClick={() => setSelectedReplyIndex(index)}
                                    className="text-[rgb(71,85,105)] text-sm font-medium cursor-pointer transition duration-150 ease-in-out hover:underline"
                                  >
                                    Reply
                                  </div>
                                </div>
                              </div>
                            </div>
                          ))}

                          {selectedReplyIndex === index && (
                            <div className="flex gap-2">
                              <img
                                src={loggedInUser?.photoURL}
                                alt="profile"
                                className="h-10 w-10 rounded-full md:h-8 md:w-8"
                              />
                              <div className="w-full flex flex-col gap-6 md:gap-3">
                                <textarea
                                  placeholder="Write a reply..."
                                  value={secondTierReplies[reply.replyId] || ""}
                                  onChange={(e) =>
                                    handleSecondTierInputChange(
                                      reply.replyId,
                                      e
                                    )
                                  }
                                  className="w-full rounded-md px-4 py-4 resize-none overflow-hidden bg-gray-100 text-black focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent transition duration-300 ease-in-out md:px-2 md:py-2"
                                  disabled={!loggedInUser}
                                />
                                <button
                                  className={`w-max bg-blue-700 hover:bg-blue-800 text-white font-semibold py-2 px-4 rounded-md transition duration-300 ease-in-out md:px-3 md:py-2 md:text-sm ${
                                    loading ||
                                    (secondTierReplies[
                                      reply.replyId
                                    ]?.trim() === "" &&
                                      "opacity-50")
                                  }`}
                                  disabled={
                                    loading ||
                                    secondTierReplies[reply.replyId]?.trim() ===
                                      ""
                                  }
                                  onClick={() =>
                                    handleSecondTierReply(
                                      reply.replyId,
                                      index,
                                      comment.commentId
                                    )
                                  }
                                >
                                  {loading ? "Replying..." : "Reply"}
                                </button>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                    {selectedCommentIndex === index && (
                      <div className="flex gap-2">
                        <img
                          src={loggedInUser?.photoURL}
                          alt="profile"
                          className="h-10 w-10 rounded-full md:h-8 md:w-8"
                        />
                        <div className="w-full flex flex-col gap-6 md:gap-3">
                          <textarea
                            placeholder="Write a reply..."
                            value={firstTierReplies[comment.commentId] || ""}
                            onChange={(e) =>
                              handleInputChange(comment.commentId, e)
                            }
                            className="w-full rounded-md px-4 py-4 resize-none overflow-hidden bg-gray-100 text-black focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent transition duration-300 ease-in-out md:px-2 md:py-2"
                            disabled={!loggedInUser}
                          />
                          <button
                            className={`w-max bg-blue-700 hover:bg-blue-800 text-white font-semibold py-2 px-4 rounded-md transition duration-300 ease-in-out md:px-3 md:py-2 md:text-sm ${
                              loading ||
                              (firstTierReplies[comment.commentId]?.trim() ===
                                "" &&
                                "opacity-50")
                            }`}
                            disabled={
                              loading ||
                              firstTierReplies[comment.commentId]?.trim() === ""
                            }
                            onClick={() =>
                              handleFirstTierReply(comment.commentId, index)
                            }
                          >
                            {loading ? "Replying..." : "Reply"}
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                  {/* <p className="text-gray-500 text-sm px-3 md:px-2">Replies</p> */}
                </div>