
 
  const [chats, setChats] = useState([]);
  const [chatUserData, setChatUserData] = useState([]);
  
   useEffect(() => {
    if (users.length > 0) {
      // Create chatIds for each user
      // const chatIds = users.map((user) => {
      //   return user.id > loggedInUser.id
      //     ? `${user.id}-${loggedInUser.id}`
      //     : `${loggedInUser.id}-${user.id}`;
      // });

      const chatsRef = collection(db, "chats");

      // Query chats where loggedInUser is involved
      const unsubscribe = onSnapshot(
        query(
          chatsRef,
          where("conversants", "array-contains", loggedInUser.id)
        ),
        (snapshot) => {
          snapshot.forEach((chatDoc) => {
            // Get the conversants of this chat
            const conversants = chatDoc.data().conversants;

            // Filter out the loggedInUser from the conversants
            const otherUserId = conversants.find(
              (id) => id !== loggedInUser.id
            );

            // Query messages for this chat
            const messagesRef = collection(chatDoc.ref, "messages");

            // Listen for new messages
            const unsubscribeMessages = onSnapshot(
              messagesRef,
              (querySnapshot) => {
                const newMessages = [];
                querySnapshot.forEach((doc) => {
                  newMessages.push(doc.data());
                });
                // Sort messages by timestamp
                newMessages.sort((a, b) => a.timestamp - b.timestamp);
                // Update the chats state
                setChats((prevChats) => ({
                  ...prevChats,
                  [otherUserId]: newMessages,
                }));
              }
            );

            // Cleanup function for message listener
            return () => {
              unsubscribeMessages();
            };
          });
        }
      );

      // Cleanup function for chat listener
      return () => {
        unsubscribe();
      };
    }
  }, [users, loggedInUser]);

  useEffect(() => {
    if (Object.keys(chats).length > 0 && users.length > 0) {
      const lastMessageData = [];

      // Iterate through the chats object
      Object.keys(chats).forEach((userId) => {
        // Check if the conversation is between the user and themselves
        if (userId === "undefined" || userId === loggedInUser.id) {
          return;
        }

        // Get all messages for the user
        const userMessages = chats[userId];

        // Get the last message for the user
        const lastMessage = userMessages[userMessages.length - 1];

        // Find the user data from the users array
        const otherUserData = users.find((user) => user.id === userId);

        // Combine user data with last message data and push to the array
        lastMessageData.push({
          id: userId,
          userData: otherUserData,
          lastMessage: lastMessage,
        });
      });

      // Now you have lastMessageData containing both user data and last message data
      // console.log("Last Message Data:", lastMessageData);
      setChatUserData(lastMessageData);
    }
  }, [chats, loggedInUser, users]);

  // console.log("chatUserData", chatUserData);


  
          {chatUserData.map((user) => (
            <Link
              key={user.userData.id}
              // scroll to bottom of page
              // onClick={() => window.scrollTo(0, document.body.scrollHeight)}
              to={`/messages/${user.userData.id}-${loggedInUser.id}`}
              // active-class="bg-gray-50"
              className={`p-4 flex flex-col gap-4 border-b border-gray-200 box-border hover:bg-purple-50 transition duration-500 ease-in-out ${
                location.pathname ===
                `/messages/${user.userData.id}-${loggedInUser.id}`
                  ? "bg-gray-50"
                  : ""
              }`}
            >
              <div className="flex justify-between">
                <div className="flex gap-3">
                  <img
                    src={
                      user.userData.photoURL
                        ? user.userData.photoURL
                        : "https://sbcf.fr/wp-content/uploads/2018/03/sbcf-default-avatar.png"
                    }
                    alt="avatar"
                    className="rounded-full h-10 w-10"
                  />
                  <div>
                    <h4 className="text-gray-700 font-semibold text-sm">
                      {user.userData.name}
                      {/* <span v-if="user.admin" className="relative" title="Admin">
                        <img
                          src="../assets/profileIcons/admin-tag.svg"
                          alt="admin"
                          className="h-6 w-6 inline-block"
                          title="Admin"
                        />
                        <p
                          className="absolute top-0.5 left-2 text-xs font-semibold text-white"
                        >
                          A
                        </p>
                      </span> */}
                    </h4>
                    <p className="text-gray-600 text-xs font-normal font-inter">
                      @{user.userData.username}
                    </p>
                  </div>
                </div>
                <p className="text-gray-600 text-sm font-normal">
                  {formatTimestamp(user?.lastMessage?.timestamp)}
                </p>
              </div>
              <h5 className="text-gray-600 font-normal text-sm font-inter">
                <span className="font-semibold">
                  {user?.lastMessage?.senderId === loggedInUser.id
                    ? "You: "
                    : ""}
                </span>
                {user?.lastMessage?.text ? (
                  // hasRead
                  <span
                  // className={`${
                  //   user.lastMessage.senderId !== loggedInUser.id &&
                  //   !user.lastMessage.hasRead
                  //     ? "font-semibold text-black"
                  //     : "font-normal"
                  // }`}
                  >
                    {user?.lastMessage?.text.length > 90
                      ? user?.lastMessage?.text.slice(0, 90) + "..."
                      : user?.lastMessage?.text}
                  </span>
                ) : (
                  <span>
                    <FontAwesomeIcon icon={faImage} className="mr-2" />
                    <span className="font-semibold">Photo</span>
                  </span>
                )}
              </h5>
            </Link>
          ))}


            <ul className="flex flex-col gap-8 px-10 md:px-6 sm:px-4">
              {chats.map((message) => (
                <li
                  key={message.timestamp}
                  //   ref={index === chats.length - 1 ? lastMessageRef : null}
                >
                  {message.senderId === loggedInUser.id ? (
                    <div className="flex flex-col gap-1.5 items-end pl-9">
                      {/* <div class="flex items-start">
                <p class="text-gray-700 text-sm font-medium text-left">You</p>
              </div>  */}
                      {message.text && (
                        <div className="bg-red-600 py-2.5 px-3.5 rounded-lg max-w-[508px]">
                          <p className="text-white font-normal text-base">
                            {message.text}
                          </p>
                        </div>
                      )}
                      {message.imageURL && (
                        <img
                          src={message.imageURL}
                          className="w-72 h-60 rounded-lg mt-2 object-cover md:w-60 md:h-56"
                        />
                      )}
                      <p className="text-gray-600 text-xs font-normal font-inter">
                        {formatTime(message.timestamp?.seconds * 1000)}{" "}
                        {/* <span className="text-gray-400">
                          {message.hasRead && "read"}
                        </span> */}
                      </p>
                    </div>
                  ) : (
                    <div className="flex gap-3 pr-9">
                      <img
                        src={
                          chatUser.photoURL
                            ? chatUser.photoURL
                            : "https://sbcf.fr/wp-content/uploads/2018/03/sbcf-default-avatar.png"
                        }
                        className="w-10 h-10 rounded-full border"
                      />
                      <div className="flex flex-col gap-1.5 items-start">
                        <div className="flex justify-between gap-4">
                          <p className="text-gray-700 text-sm font-medium">
                            {chatUser.name}
                            {/* <span v-if="chatUser.admin" class="relative" title="Admin">
                      <img
                        src="../../assets/profileIcons/admin-tag.svg"
                        alt="admin"
                        class="h-6 w-6 inline-block"
                        title="Admin"
                      />
                      <p
                        class="absolute top-0.5 left-2 text-xs font-semibold text-white"
                      >
                        A
                      </p>
                    </span> */}
                          </p>
                        </div>
                        {message.text && (
                          <div className="bg-gray-200 py-2.5 px-3.5 rounded-lg max-w-[508px]">
                            <p className="text-gray-700 font-normal text-base">
                              {message.text}
                            </p>
                          </div>
                        )}
                        {message.imageURL && (
                          <img
                            src={message.imageURL}
                            className="w-72 h-60 rounded-lg mt-2 object-cover md:w-60 md:h-56"
                          />
                        )}
                        <p className="text-gray-600 text-xs font-normal font-inter">
                          {formatTime(message.timestamp.seconds * 1000)}
                        </p>
                      </div>
                    </div>
                  )}
                </li>
              ))}
            </ul>